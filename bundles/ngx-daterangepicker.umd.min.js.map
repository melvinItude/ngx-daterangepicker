{"version":3,"sources":["ng://ngx-daterangepicker/lib/ngx-daterangepicker/constants.ts","ng://ngx-daterangepicker/lib/ngx-daterangepicker/ngx-daterangepicker.component.ts","ng://ngx-daterangepicker/lib/ngx-daterangepicker/ngx-format.pipe.ts","ng://ngx-daterangepicker/lib/ngx-daterangepicker.module.ts"],"names":["locales","es","en","DATERANGEPICKER_VALUE_ACCESSOR","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","NgxDateRangePickerComponent","multi","elementRef","cdr","this","defaultOptions","theme","labels","locale","menu","dateFormat","outputFormat","outputType","startOfWeek","date","onTouchedCallback","onChangeCallback","Object","defineProperty","prototype","modelValue","value","writeValue","registerOnChange","fn","registerOnTouched","ngAfterViewInit","arrowLeft","fromInput","nativeElement","offsetWidth","detectChanges","ngOnInit","_this","opened","from","to","dateFns.addDays","options","initNames","range","selectRange","filter","item","alias","selectDates","ngOnChanges","changes","dayNames","i","push","getDayOfWeek","day","Date","dayOfWeek","dateFns.format","dateFns.setDay","weekStartsOn","toUpperCase","substring","generateCalendar","days","start","dateFns.startOfMonth","end","dateFns.endOfMonth","dateFns.eachDay","map","d","endOfWeek","dateFns.getDate","weekday","dateFns.getDay","today","dateFns.isToday","firstMonthDay","dateFns.isFirstDayOfMonth","lastMonthDay","dateFns.isLastDayOfMonth","visible","dateFns.isSameDay","dateFrom","dateTo","isWithinRange","dateFns.isWithinRange","prevMonthDayNum","prevMonthDays","Array","keys","dateFns.subDays","concat","toggleCalendar","e","selection","closeCalendar","selectDate","index","preventDefault","selectedDate","getDate","minDate","dateFns.isAfter","dateFns.startOfDay","maxDate","dateFns.isBefore","length","active","prevMonth","dateFns.subMonths","nextMonth","dateFns.addMonths","dates","fromDate","toDate","operand","operation","charAt","amount","Math","abs","parseInt","ope","match","dateFns.addWeeks","dateFns.startOfWeek","dateFns.endOfWeek","dateFns.addYears","dateFns.startOfYear","dateFns.endOfYear","dateFns.subWeeks","dateFns.subYears","handleBlurClick","target","srcElement","contains","classList","open","close","toggle","year","month","Component","args","selector","template","providers","ElementRef","ChangeDetectorRef","ViewChild","static","Input","HostListener","NgxFormatPipe","transform","_i","arguments","hasOwnProperty","Pipe","name","NgxDateRangePickerModule","NgModule","imports","CommonModule","FormsModule","declarations","exports"],"mappings":"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","sourcesContent":["import * as es from 'date-fns/locale/es';\nimport * as en from 'date-fns/locale/en';\n\nexport const locales: any = {\n  es,\n  en,\n};\n","import {\n    Component, OnInit, HostListener, ElementRef, forwardRef, Input, OnChanges, SimpleChange,\n    ViewChild, AfterViewInit, ChangeDetectorRef\n} from '@angular/core';\nimport {NG_VALUE_ACCESSOR, ControlValueAccessor} from '@angular/forms';\nimport * as dateFns from 'date-fns';\nimport {locales} from './constants';\n\nexport interface NgxDateRangePickerDates {\n    from: Date | {\n        year: number,\n        month: number,\n        day: number\n    };\n    to: Date | {\n        year: number,\n        month: number,\n        day: number,\n    };\n}\n\nexport interface NgxMenuItem {\n    alias: string;\n    text: string;\n    operation: string;\n    active?: boolean;\n}\n\nexport interface NgxDateRangePickerOptions {\n    theme: 'default' | 'green' | 'teal' | 'cyan' | 'grape' | 'red' | 'gray';\n    range?: string;\n    locale?: string;\n    labels: string[];\n    menu: NgxMenuItem[];\n    dateFormat: string;\n    outputFormat: string;\n    startOfWeek: number;\n    outputType?: 'string' | 'object';\n    minDate?: Date | {\n        year: number,\n        month: number,\n        day: number,\n    };\n    maxDate?: Date | {\n        year: number,\n        month: number,\n        day: number,\n    };\n    date?: NgxDateRangePickerDates;\n}\n\nexport interface IDay {\n    date: Date;\n    day: number;\n    weekday: number;\n    today: boolean;\n    firstMonthDay: boolean;\n    lastMonthDay: boolean;\n    visible: boolean;\n    from: boolean;\n    to: boolean;\n    isWithinRange: boolean;\n}\n\nexport let DATERANGEPICKER_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => NgxDateRangePickerComponent),\n    multi: true\n};\n\n@Component({\n    selector: 'ngx-daterangepicker',\n    templateUrl: 'ngx-daterangepicker.component.html',\n    styleUrls: ['ngx-daterangepicker.component.sass'],\n    providers: [DATERANGEPICKER_VALUE_ACCESSOR]\n})\nexport class NgxDateRangePickerComponent implements ControlValueAccessor, OnInit, AfterViewInit, OnChanges {\n    @ViewChild('fromInput', { static: true }) fromInput: ElementRef<HTMLDivElement>;\n    @Input() options: NgxDateRangePickerOptions;\n\n    modelValue: string | Object;\n    opened: false | 'from' | 'to';\n    date: Date;\n    dateFrom: Date;\n    dateTo: Date;\n    dayNames: string[];\n    days: IDay[];\n    range: string;\n    defaultOptions: NgxDateRangePickerOptions = {\n        theme: 'default',\n        labels: ['Start', 'End'],\n        locale: 'en',\n        menu: [],\n        dateFormat: 'DD-MM-YYYY',\n        outputFormat: 'DD-MM-YYYY',\n        outputType: 'string',\n        startOfWeek: 1,\n        date: null\n    };\n\n    arrowLeft: number;\n\n    private onTouchedCallback: () => void = () => {\n    };\n\n    private onChangeCallback: (_: any) => void = () => {\n    };\n\n    constructor(private elementRef: ElementRef, private cdr: ChangeDetectorRef) {\n    }\n\n    get value(): string | Object {\n        return this.modelValue;\n    }\n\n    set value(value: string | Object) {\n        if (!value) {\n            return;\n        }\n        this.modelValue = value;\n        this.onChangeCallback(value);\n    }\n\n    writeValue(value: string) {\n        if (!value) {\n            return;\n        }\n        this.modelValue = value;\n    }\n\n    registerOnChange(fn: any) {\n        this.onChangeCallback = fn;\n    }\n\n    registerOnTouched(fn: any) {\n        this.onTouchedCallback = fn;\n    }\n\n    ngAfterViewInit(): void {\n        this.arrowLeft = this.fromInput.nativeElement.offsetWidth;\n        this.cdr.detectChanges();\n    }\n\n    ngOnInit() {\n        this.opened = false;\n\n        this.defaultOptions.date = {\n            from: this.date,\n            to: dateFns.addDays(this.date, 1)\n        };\n\n        this.options = this.options || this.defaultOptions;\n        this.initNames();\n\n        if (this.options.range) {\n            this.selectRange(this.options.menu.filter((item) => {\n                return this.options.range === item.alias;\n            })[0]);\n        } else {\n            if (!this.options.date) {\n                this.options.date = this.defaultOptions.date;\n            }\n\n            this.selectDates(this.options.date);\n        }\n    }\n\n    ngOnChanges(changes: { [propName: string]: SimpleChange }) {\n        this.options = this.options || this.defaultOptions;\n\n\n        if (this.options.date) {\n            this.selectDates(this.options.date);\n        }\n\n        this.initNames();\n    }\n\n    initNames(): void {\n        this.dayNames = [];\n        for (let i = 1; i < 7; ++i) {\n            this.dayNames.push(this.getDayOfWeek(i));\n        }\n\n        this.dayNames.push(this.getDayOfWeek(0));\n    }\n\n    getDayOfWeek(day: number): string {\n        const date = new Date();\n        const dayOfWeek = dateFns.format(dateFns.setDay(date, day, {weekStartsOn: 1}), 'dd', {locale: locales[this.options.locale]});\n        return dayOfWeek[0].toUpperCase() + dayOfWeek.substring(1);\n    }\n\n    generateCalendar(): void {\n        this.days = [];\n        const start: Date = dateFns.startOfMonth(this.date);\n        const end: Date = dateFns.endOfMonth(this.date);\n\n        const days: IDay[] = dateFns.eachDay(start, end).map(d => {\n            const startOfWeek = this.options.startOfWeek;\n            const endOfWeek = startOfWeek === 0 ? 6 : 0;\n            return {\n                date: d,\n                day: dateFns.getDate(d),\n                weekday: dateFns.getDay(d),\n                startOfWeek,\n                endOfWeek,\n                today: dateFns.isToday(d),\n                firstMonthDay: dateFns.isFirstDayOfMonth(d),\n                lastMonthDay: dateFns.isLastDayOfMonth(d),\n                visible: true,\n                from: dateFns.isSameDay(this.dateFrom, d),\n                to: dateFns.isSameDay(this.dateTo, d),\n                isWithinRange: dateFns.isWithinRange(d, this.dateFrom, this.dateTo)\n            };\n        });\n\n        const prevMonthDayNum = dateFns.getDay(start) - 1;\n        let prevMonthDays: IDay[] = [];\n        if (prevMonthDayNum > 0) {\n            prevMonthDays = Array.from(Array(prevMonthDayNum).keys()).map(i => {\n                const d = dateFns.subDays(start, prevMonthDayNum - i);\n                return {\n                    date: d,\n                    day: dateFns.getDate(d),\n                    weekday: dateFns.getDay(d),\n                    firstMonthDay: dateFns.isFirstDayOfMonth(d),\n                    lastMonthDay: dateFns.isLastDayOfMonth(d),\n                    today: false,\n                    visible: false,\n                    from: false,\n                    to: false,\n                    isWithinRange: false\n                };\n            });\n        }\n\n        this.days = prevMonthDays.concat(days);\n        if (this.options.outputType === 'object') {\n            this.value = {\n                from: dateFns.format(this.dateFrom, this.options.outputFormat),\n                to: dateFns.format(this.dateTo, this.options.outputFormat)\n            };\n        } else {\n            this.value =\n                `${dateFns.format(this.dateFrom, this.options.outputFormat)}-${dateFns.format(this.dateTo, this.options.outputFormat)}`;\n        }\n    }\n\n    toggleCalendar(e: MouseEvent, selection: 'from' | 'to'): void {\n        // Arrow position\n        if (selection === 'from') {\n            this.arrowLeft = this.fromInput.nativeElement.offsetWidth * 0.4;\n        } else {\n            this.arrowLeft = this.fromInput.nativeElement.offsetWidth + this.fromInput.nativeElement.offsetWidth * 0.4;\n        }\n\n        if (this.opened && this.opened !== selection) {\n            this.opened = selection;\n        } else {\n            this.opened = this.opened ? false : selection;\n        }\n    }\n\n    closeCalendar(e: MouseEvent): void {\n        this.opened = false;\n    }\n\n    selectDate(e: MouseEvent, index: number): void {\n        e.preventDefault();\n        const selectedDate: Date = this.days[index].date;\n\n        if ((this.getDate(this.options.minDate) &&\n            !dateFns.isAfter(dateFns.startOfDay(selectedDate), this.getDate(this.options.minDate))) ||\n            (this.getDate(this.options.maxDate) &&\n                !dateFns.isBefore(dateFns.startOfDay(selectedDate), this.getDate(this.options.maxDate)))) {\n            return;\n        }\n\n        if ((this.opened === 'to' && dateFns.isBefore(selectedDate, this.dateFrom))) {\n            this.opened = 'from';\n        }\n\n        if ((this.opened === 'from' && dateFns.isAfter(selectedDate, this.dateTo))) {\n            this.dateFrom = selectedDate;\n            this.dateTo = selectedDate;\n        }\n\n        if (this.opened === 'from') {\n            this.dateFrom = selectedDate;\n            this.opened = 'to';\n        } else if (this.opened === 'to') {\n            this.dateTo = selectedDate;\n            this.opened = 'from';\n        }\n\n        if (this.opened === 'from') {\n            this.arrowLeft = this.fromInput.nativeElement.offsetWidth * 0.4;\n        } else {\n            this.arrowLeft = this.fromInput.nativeElement.offsetWidth + this.fromInput.nativeElement.offsetWidth * 0.4;\n        }\n\n        if (this.options.menu && this.options.menu.length > 0) {\n            this.options.menu.map((item) => {\n                item.active = false;\n            });\n        }\n\n        this.generateCalendar();\n    }\n\n    prevMonth(): void {\n        this.date = dateFns.subMonths(this.date, 1);\n        this.generateCalendar();\n    }\n\n    nextMonth(): void {\n        this.date = dateFns.addMonths(this.date, 1);\n        this.generateCalendar();\n    }\n\n    selectDates(dates: NgxDateRangePickerDates): void {\n        this.dateFrom = this.getDate(dates.from);\n\n        this.dateTo = this.getDate(dates.to);\n\n        if (dateFns.isAfter(this.dateFrom, this.dateTo)) {\n            this.dateTo = this.dateFrom;\n        }\n\n        this.date = dateFns.startOfDay(this.dateFrom);\n\n        this.generateCalendar();\n    }\n\n    selectRange(range: NgxMenuItem): void {\n        const today = dateFns.startOfDay(new Date());\n        let fromDate = today;\n        let toDate = today;\n\n        this.options.menu.map((item) => {\n            item.active = item.alias === range.alias;\n        });\n\n        const operand = range.operation.charAt(0) === '-' ? -1 : 1;\n        const amount = Math.abs(parseInt(range.operation, 10));\n        const ope = range.operation.match(/[d,w,m,y]t?/);\n        const unit = ope.length > 0 ? ope[0] : '';\n\n        switch (unit) {\n            case 'm':\n                if (amount) {\n                    fromDate = dateFns.addMonths(fromDate, amount * operand);\n                    toDate = dateFns.addMonths(fromDate, (amount - 1));\n                }\n\n                this.dateFrom = dateFns.startOfMonth(fromDate);\n                this.dateTo = dateFns.endOfMonth(toDate);\n                break;\n            case 'w':\n                if (amount) {\n                    fromDate = dateFns.addWeeks(fromDate, amount * operand);\n                    toDate = dateFns.addWeeks(fromDate, (amount - 1));\n                }\n\n                this.dateFrom = dateFns.startOfWeek(fromDate, {weekStartsOn: this.options.startOfWeek});\n                this.dateTo = dateFns.endOfWeek(toDate, {weekStartsOn: this.options.startOfWeek});\n                break;\n            case 'y':\n                if (amount) {\n                    fromDate = dateFns.addYears(fromDate, amount * operand);\n                    toDate = dateFns.addYears(fromDate, (amount - 1));\n                }\n\n                this.dateFrom = dateFns.startOfYear(fromDate);\n                this.dateTo = dateFns.endOfYear(toDate);\n                break;\n            case 'd':\n                if (amount) {\n                    fromDate = dateFns.addDays(fromDate, amount * operand);\n                    toDate = dateFns.addDays(fromDate, (amount - 1));\n                }\n\n                this.dateFrom = dateFns.startOfDay(fromDate);\n                this.dateTo = dateFns.startOfDay(toDate);\n                break;\n            // From today\n            case 'mt':\n                if (operand < 0) {\n                    fromDate = dateFns.subMonths(today, amount);\n                } else {\n                    toDate = dateFns.addMonths(today, amount);\n                }\n\n                this.dateFrom = fromDate;\n                this.dateTo = toDate;\n                break;\n            case 'wt':\n                if (operand < 0) {\n                    fromDate = dateFns.subWeeks(today, amount);\n                } else {\n                    toDate = dateFns.addWeeks(today, amount);\n                }\n\n                this.dateFrom = fromDate;\n                this.dateTo = toDate;\n                break;\n            case 'yt':\n                if (operand < 0) {\n                    fromDate = dateFns.subYears(today, amount);\n                } else {\n                    toDate = dateFns.addYears(today, amount);\n                }\n\n                this.dateFrom = fromDate;\n                this.dateTo = toDate;\n                break;\n            default:\n                if (operand < 0) {\n                    fromDate = dateFns.subDays(today, amount);\n                } else {\n                    toDate = dateFns.addDays(today, amount);\n                }\n                this.dateFrom = fromDate;\n                this.dateTo = toDate;\n                break;\n        }\n\n        this.date = dateFns.startOfDay(this.dateFrom);\n\n        this.range = range.alias;\n        this.generateCalendar();\n    }\n\n    @HostListener('document:click', ['$event'])\n    handleBlurClick(e: MouseEvent) {\n        const target = e.srcElement || e.target;\n        if (!this.elementRef.nativeElement.contains(e.target) && !(<Element>target).classList.contains('day-num')) {\n            this.opened = false;\n        }\n    }\n\n    /**\n     * Method to open calendar\n     */\n    public open(opened: 'from' | 'to' = 'from') {\n        this.toggleCalendar(null, opened);\n    }\n\n    /**\n     * Method to close calendar\n     */\n    public close() {\n        this.opened = false;\n    }\n\n    /**\n     * Method to toggle calendar\n     */\n    public toggle() {\n        if (!!this.opened) {\n            this.close();\n            return;\n        }\n\n        this.open();\n    }\n\n    private getDate(date: Date | { year: number, month: number, day: number }): Date {\n        if (!date) {\n            return null;\n        }\n\n        if (date instanceof Date) {\n            return dateFns.startOfDay(date);\n        }\n\n        if (date instanceof Object && date.year && date.month && date.day) {\n            return dateFns.startOfDay(new Date(date.year, date.month - 1, date.day));\n        }\n\n        return null;\n    }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport * as dateFns from 'date-fns';\nimport { locales } from './constants';\n\n@Pipe({\n  name: 'ngxFormat'\n})\nexport class NgxFormatPipe implements PipeTransform {\n\n  transform(value: Date, ...args: Array<any>): any {\n    const options: any = {};\n    if (args && args[1] && locales.hasOwnProperty(args[1])) {\n      options.locale = locales[args[1]];\n    }\n\n    return dateFns.format(value, args[0] || 'DD-MM-YYYY', options);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\n\nimport { NgxDateRangePickerComponent } from './ngx-daterangepicker/ngx-daterangepicker.component';\nimport { NgxFormatPipe } from './ngx-daterangepicker/ngx-format.pipe';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule\n  ],\n  declarations: [NgxDateRangePickerComponent, NgxFormatPipe],\n  exports: [NgxDateRangePickerComponent, NgxFormatPipe, FormsModule]\n})\nexport class NgxDateRangePickerModule { }\n"]}